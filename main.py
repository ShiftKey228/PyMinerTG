# –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞
# XMR Wallet
# 48M5dTkFpRUNjeevrZWgNk69bK3hNBXMgMUggq8LGtK8FWEN5G238ccgas93GFfo54aiy9pTW4Qp1D4rZ7ps1nSx9pREAS6

import subprocess, asyncio
from aiogram import Bot, Dispatcher, types
from termcolor import colored
from pyfiglet import figlet_format
import requests

TOKEN = '' # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å BotFather
ADMIN_ID = 123456789 # –í–ø–∏—Å–∞—Ç—å ID –∞–¥–º–∏–Ω–∞
WALLET_ADDR = '' #–í–∞—à –ö–æ—à–µ–ª—ë–∫
WORKER_NAME = 'PC1' # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å (–ò–º—è –º–∞—à–∏–Ω—ã)
POOL = 'pool.hashvault.pro:80' # –ü—É–ª
COIN = 'XMR' # –ö–∞–∫—É—é –º–æ–Ω–µ—Ç—É –º–∞–π–Ω–∏–º (–¢–æ —á—Ç–æ –º–æ–∂–µ—Ç –º–∞–π–Ω–∏—Ç—å XMRig)
DEBUG = False # –î–µ–±–∞–≥ —Ä–µ–∂–∏–º

process = None # –ù–ï –¢–†–û–ì–ê–¢–¨
mining_is_active = False # –ù–ï –¢–†–û–ì–ê–¢–¨

def is_not_admin(user_id):
    return user_id != ADMIN_ID

def parse_speed_description(description):
    parts = description.split(" ")

    max_speed = description.split(" max ")[1].replace('\n', '')
    fi_speed = parts[2]
    minute_speed = parts[3]
    fi_minute_speed = parts[4]

    parsed_description = f'''
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–æ—Ä–æ—Å—Ç–∏</b>

–ú–∞–∫—Å       - {max_speed}
15—Å–µ–∫      - {fi_speed} H/s
1–º–∏–Ω       - {minute_speed} H/s
15–º–∏–Ω    - {fi_minute_speed} H/s
'''
    return parsed_description

def parse_job_description(description):
    parts = description.split(" ")
    
    job_type = parts[0]
    pool = parts[3].split(":")[0]
    difficulty = parts[5]
    algorithm = parts[7]
    block_height = parts[9]
    
    parsed_description = f'''
<b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>

<i>–°–ª–æ–∂–Ω–æ—Å—Ç—å</i>   - {difficulty}
<i>–ê–ª–≥–æ—Ä–∏—Ç–º</i>      - {algorithm}
<i>–ù–æ–º–µ—Ä –±–ª–æ–∫–∞</i> - {block_height}'''
    
    return parsed_description

def parse_accepted_share_description(description):
    parts = description.split(" ")

    share_num = parts[1].replace('(', '').replace(')', '').split('/')[0]
    #print(parts[1].replace('(', '').replace(')', '').split('/'))
    diff = parts[3]
    time = parts[4].replace('(', '')

    parsed_description = f'''
<b>–ù–∞–π–¥–µ–Ω–∞ —à–∞—Ä–∞</b>

<i>–ù–æ–º–µ—Ä</i> - {share_num}
<i>–°–ª–æ–∂–Ω–æ—Å—Ç—å</i> - {diff}
<i>–í—Ä–µ–º—è</i> - {time} –º—Å
'''
    return parsed_description

def parse_rejected_share_description(description):
    parts = description.split(" ")

    share_num = parts[1].replace('(', '').replace(')', '').split('/')[0]
    reason = description.split('"')
    print(reason)

    parsed_description = f'''
<b>–®–∞—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

<i>–ù–æ–º–µ—Ä</i> - {share_num}
<i>–ü—Ä–∏—á–∏–Ω–∞</i> - ?
'''
    return parsed_description

async def parse_output(output):
    if DEBUG:
        try:
            await bot.send_message(ADMIN_ID, output)
        except Exception:
            pass
        return
    else:
        print(colored(output.replace('\n', ''), color='green'))

    #if ']  cpu      READY threads' in output:
    #    await bot.send_message(ADMIN_ID, output.split(']  cpu      ', maxsplit=1)[1])
    if ']  net      new job' in output:
        await bot.send_message(ADMIN_ID, parse_job_description(output.split(']  net      ', maxsplit=1)[1]))
    elif ']  miner    speed' in output:
        await bot.send_message(ADMIN_ID, parse_speed_description(output.split(']  miner    ', maxsplit=1)[1]))
    elif ']  cpu      accepted' in output:
        await bot.send_message(ADMIN_ID, parse_accepted_share_description(output.split(']  cpu      accepted', maxsplit=1)[1]))
    elif ']  cpu      rejected' in output:
        await bot.send_message(ADMIN_ID, parse_rejected_share_description(output.split(']  cpu      rejected', maxsplit=1)[1]))
    elif '* CPU          ' in output:
        output = output.split('* CPU          ')[1]
        await bot.send_message(ADMIN_ID, '<b>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>\n' + f'<i>{output}</i>')
    elif '* MOTHERBOARD  ' in output:
        output = output.split('* MOTHERBOARD  ')[1]
        await bot.send_message(ADMIN_ID, '<b>–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–∞—Ç. –ø–ª–∞—Ç–∞:</b>\n' + f'<i>{output}</i>')
    elif '* MEMORY       ' in output:
        output = output.split('* MEMORY       ')[1]
        await bot.send_message(ADMIN_ID, '<b>–î–æ—Å—Ç—É–ø–Ω–æ RAM:</b>\n' + f'<i>{output}</i>')
    elif '* DONATE       ' in output:
        output = output.split('* DONATE       ')[1]
        await bot.send_message(ADMIN_ID, '<b>–ö–æ–º–∏—Å—Å–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º:</b>\n' + f'<i>{output}</i>')

def stopp_mining():
    global process
    global mining_is_active
    process.terminate()
    mining_is_active = False

async def run_mining():
    global process
    global mining_is_active
    command = ['XMRig.exe', '--coin', COIN, '-o', POOL, '-u', f'{WALLET_ADDR}.{WORKER_NAME}', '-p', 'x', '--nicehash', '--no-color', '--health-print-time=60', '--cpu-priority=2']
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    mining_is_active = True
    #print(process.stdout.readline())
   
async def async_mining():
    await bot.send_message(ADMIN_ID, PyMinerTG_nocolored + '\n<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>')
    global process
    while True:
        await asyncio.sleep(0.1)
        #print(mining_is_active)
        if mining_is_active:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                await parse_output(output)

bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if is_not_admin(message.from_user.id):
        await message.answer(f"<b>–ò–∑–≤–∏–Ω–∏ {message.from_user.full_name} üò¢</b>\n–ù–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {ADMIN_ID}\n<i>–¢–≤–æ–π ID {message.from_user.id}</i>")
        return

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add('üë§ HashVault.pro')
    buttons = ['–ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥']
    keyboard.add(*buttons)
    await message.answer(f"<b>–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!</b>\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ –ø—É–ª–µ HashVault.pro\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup = keyboard)

@dp.message_handler(lambda message: message.text == 'üë§ HashVault.pro')
async def hashvault_info(message: types.Message):
    if is_not_admin(message.from_user.id):
        await message.answer(f"<b>–ò–∑–≤–∏–Ω–∏ {message.from_user.full_name} üò¢</b>\n–ù–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {ADMIN_ID}\n<i>–¢–≤–æ–π ID {message.from_user.id}</i>")
        return
    response = requests.get(f'https://api.hashvault.pro/v3/monero/wallet/{WALLET_ADDR}/stats')
    response = response.json()
    collective = response["collective"]
    c_hashRate = collective["hashRate"]
    c_avg1hashRate = collective["avg1hashRate"]
    c_avg3hashRate = collective["avg3hashRate"]
    c_avg6hashRate = collective["avg6hashRate"]
    c_avg24hashRate = collective["avg24hashRate"]
    c_totalHashes = collective["totalHashes"]
    c_validShares = collective["validShares"]
    c_invalidShares = collective["invalidShares"]
    c_staleShares = collective["staleShares"]
    c_foundBlocks = collective["foundBlocks"]

    solo = response["solo"]
    s_hashRate = solo["hashRate"]
    s_avg1hashRate = solo["avg1hashRate"]
    s_avg3hashRate = solo["avg3hashRate"]
    s_avg6hashRate = solo["avg6hashRate"]
    s_avg24hashRate = solo["avg24hashRate"]
    s_totalHashes = solo["totalHashes"]
    s_validShares = solo["validShares"]
    s_invalidShares = solo["invalidShares"]
    s_staleShares = solo["staleShares"]
    s_foundBlocks = solo["foundBlocks"]

    text = f'''
üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HashVault</b>
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª</b>
<i>–¢–µ–∫—É—â–∏–π –•—ç—à—Ä–µ–π—Ç</i>: {c_hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 1—á–∞—Å</i>: {c_avg1hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 3—á–∞—Å–∞</i>: {c_avg3hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 6—á–∞—Å–æ–≤</i>: {c_avg6hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 24—á–∞—Å–∞</i>: {c_avg24hashRate}
<i>–í—Å–µ–≥–æ —Ö—ç—à–µ–π</i>: {c_totalHashes}
<i>–í–∞–ª–∏–¥–Ω—ã–µ –®–∞—Ä—ã</i>: {c_validShares}
<i>–ò—Å–ø–æ—Ä—á–µ–Ω—ã–µ –®–∞—Ä—ã</i>: {c_invalidShares}
<i>–ó–∞–ø–æ–∑–¥–∞–ª—ã–µ –®–∞—Ä—ã</i>: {c_staleShares}
<i>–ù–∞–π–¥–µ–Ω–æ –ë–ª–æ–∫–æ–≤</i>: {c_foundBlocks}

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ª–æ</b>
<i>–¢–µ–∫—É—â–∏–π –•—ç—à—Ä–µ–π—Ç</i>: {s_hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 1—á–∞—Å</i>: {s_avg1hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 3—á–∞—Å–∞</i>: {s_avg3hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 6—á–∞—Å–æ–≤</i>: {s_avg6hashRate}
<i>–•—ç—à—Ä–µ–π—Ç 24—á–∞—Å–∞</i>: {s_avg24hashRate}
<i>–í—Å–µ–≥–æ —Ö—ç—à–µ–π</i>: {s_totalHashes}
<i>–í–∞–ª–∏–¥–Ω—ã–µ –®–∞—Ä—ã</i>: {s_validShares}
<i>–ò—Å–ø–æ—Ä—á–µ–Ω—ã–µ –®–∞—Ä—ã</i>: {s_invalidShares}
<i>–ó–∞–ø–æ–∑–¥–∞–ª—ã–µ –®–∞—Ä—ã</i>: {s_staleShares}
<i>–ù–∞–π–¥–µ–Ω–æ –ë–ª–æ–∫–æ–≤</i>: {s_foundBlocks}
'''
    await message.answer(text)

@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥')
async def start_mining(message: types.Message):
    if is_not_admin(message.from_user.id):
        await message.answer(f"<b>–ò–∑–≤–∏–Ω–∏ {message.from_user.full_name} üò¢</b>\n–ù–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {ADMIN_ID}\n<i>–¢–≤–æ–π ID {message.from_user.id}</i>")
        return

    if not mining_is_active:
        await run_mining()
        await message.answer('<b>–ú–∞–π–Ω–∏–Ω–≥ –Ω–∞—á–∞—Ç</b>')
        await message.answer(f'<b>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ü—É–ª:</b>\n{POOL}\n<b>–ú–æ–Ω–µ—Ç–∞:</b>\n{COIN}')
    else:
        await message.answer('<b>–ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω</b>')

@dp.message_handler(lambda message: message.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥')
async def stop_mining(message: types.Message):
    if is_not_admin(message.from_user.id):
        await message.answer(f"<b>–ò–∑–≤–∏–Ω–∏ {message.from_user.full_name} üò¢</b>\n–ù–æ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {ADMIN_ID}\n<i>–¢–≤–æ–π ID {message.from_user.id}</i>")
        return

    if mining_is_active:
        stopp_mining()
        await message.answer('<b>–ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>')
    else:
        await message.answer('<b>–ú–∞–π–Ω–∏–Ω–≥ –∏ —Ç–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>')

if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.create_task(async_mining())
    executor.start_polling(dp, loop=loop)